// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String  
  providerAccountId String  

  refresh_token     String? @db.Text()
  access_token      String? @db.Text()
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text()
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model User {
  id            String    @id @default(cuid())
  name          String    @db.VarChar(255)
  email         String    @unique
  isAdmin       Boolean   @default(false)

  emailVerified DateTime?
  image         String?

  milestones Milestone[]
  profile    Profile?
  accounts   Account[]
  sessions   Session[]
}

model VerificationToken {
  identifier String 
  token String @unique
  expires DateTime

  @@unique([identifier, token])
}

model Milestone {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String   @db.MediumText
  type      String   @db.VarChar(255) //professional or personal

  document  String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Profile {
  id         Int    @id @default(autoincrement())
  profession String @db.VarChar(255)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}
